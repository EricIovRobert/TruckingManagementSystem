{% extends 'base.html.twig' %}

{% block body %}
    <h1>Adaugă o cheltuială nouă</h1>
    {{ form_start(form) }}
        {{ form_widget(form) }}
        <button type="submit" class="btn btn-primary">Salvează</button>
    {{ form_end(form) }}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const categorieField = document.querySelector('[name="cheltuieli[categorie]"]');
            const subcategorieField = document.querySelector('[name="cheltuieli[subcategorie]"]');
            const sumaField = document.querySelector('[name="cheltuieli[suma]"]');
            const litriMotorinaField = document.querySelector('[name="cheltuieli[litri_motorina]"]');
            const pretUnitateField = document.querySelector('[name="cheltuieli[pret_unitate]"]');
            const monedaField = document.querySelector('[name="cheltuieli[moneda]"]');
            let cursEurRon = 0;

            // Ascundem inițial câmpurile care nu sunt necesare
            if (litriMotorinaField) {
                litriMotorinaField.closest('.form-group, .form-row, div').style.display = 'none';
            }
            if (pretUnitateField) {
                pretUnitateField.closest('.form-group, .form-row, div').style.display = 'none';
            }

            const numarKm = {{ comanda.numarKm is not null ? comanda.numarKm : 'null' }};
            let subcategorieSelect = null;

            // Preluăm cursul valutar din API
            fetch('/api/curs-valutar', {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                cursEurRon = data.conversion_rates.RON;
                recalcSuma(); // Recalculăm suma după ce avem cursul
            })
            .catch(error => {
                console.error('Eroare la preluarea cursului valutar:', error);
                cursEurRon = 5; // Valoare fallback în caz de eroare
                recalcSuma();
            });

            // Filtrăm categoria "Fixe" din dropdown
            function filterCategorii() {
                for (let i = 0; i < categorieField.options.length; i++) {
                    if (categorieField.options[i].text === 'Fixe') {
                        categorieField.remove(i);
                        break;
                    }
                }
            }

            // Funcție pentru gestionarea vizibilității câmpului moneda
            function toggleMonedaField() {
                const categorieNume = categorieField.options[categorieField.selectedIndex].text;
                const monedaContainer = monedaField.closest('.form-group, .form-row, div');
                if (categorieNume === 'Consumabile') {
                    monedaContainer.style.display = 'none';
                    monedaField.value = 'RON'; // Setăm implicit RON pentru Consumabile
                } else {
                    monedaContainer.style.display = '';
                }
                recalcSuma(); // Recalculăm suma după schimbarea categoriei
            }

            // Funcție pentru recalcularea sumei
            function recalcSuma() {
                const pretUnitate = parseFloat(pretUnitateField.value) || 0;
                const litri = parseFloat(litriMotorinaField.value) || 0;
                let suma = 0;
                if (litriMotorinaField && litriMotorinaField.closest('.form-group, .form-row, div').style.display !== 'none') {
                    suma = pretUnitate * litri;
                } else {
                    suma = pretUnitate;
                }
                // Aplicăm cursul valutar doar dacă moneda este EUR și categoria nu este Consumabile
                const categorieNume = categorieField.options[categorieField.selectedIndex].text;
                if (monedaField.value === 'EUR' && categorieNume !== 'Consumabile') {
                    suma = suma * cursEurRon;
                }
                sumaField.value = suma.toFixed(2);
            }

            // Funcție apelată la schimbarea subcategoriei
            function onSubcategorieChange() {
                const selectedOption = subcategorieSelect.options[subcategorieSelect.selectedIndex];
                if (!selectedOption) return;

                const pretStandard = parseFloat(selectedOption.getAttribute('data-pret-standard') || '0');
                const kmUtilizareMax = parseFloat(selectedOption.getAttribute('data-km-utilizare-max') || '0');
                const pretPerL = parseFloat(selectedOption.getAttribute('data-pret-per-l') || '0');

                subcategorieField.value = subcategorieSelect.value;

                pretUnitateField.closest('.form-group, .form-row, div').style.display = '';
                if (pretPerL > 0) {
                    pretUnitateField.value = pretPerL.toFixed(2);
                    if (litriMotorinaField) {
                        litriMotorinaField.closest('.form-group, .form-row, div').style.display = '';
                    }
                } else if (pretStandard > 0) {
                    pretUnitateField.value = pretStandard.toFixed(2);
                    if (litriMotorinaField) {
                        litriMotorinaField.closest('.form-group, .form-row, div').style.display = 'none';
                        litriMotorinaField.value = '';
                    }
                } else {
                    pretUnitateField.value = '';
                    if (litriMotorinaField) {
                        litriMotorinaField.closest('.form-group, .form-row, div').style.display = 'none';
                        litriMotorinaField.value = '';
                    }
                }

                const categorieNume = categorieField.options[categorieField.selectedIndex].text;
                if (categorieNume === 'Consumabile' && pretStandard > 0 && kmUtilizareMax > 0) {
                    if (numarKm !== null && numarKm > 0) {
                        const pretProportional = (pretStandard / kmUtilizareMax) * numarKm;
                        pretUnitateField.value = pretStandard.toFixed(2);
                        sumaField.value = pretProportional.toFixed(2); // Fără curs valutar pentru Consumabile
                    } else {
                        pretUnitateField.value = pretStandard.toFixed(2);
                        sumaField.value = pretStandard.toFixed(2); // Fără curs valutar pentru Consumabile
                    }
                } else {
                    recalcSuma();
                }
            }

            // Încărcarea subcategoriilor via AJAX
            function updateSubcategories() {
                const categorieId = categorieField.value;
                if (!categorieId) {
                    subcategorieSelect.innerHTML = '<option value="">Selectează o subcategorie (opțional)</option>';
                    subcategorieField.value = '';
                    sumaField.value = '';
                    pretUnitateField.value = '';
                    pretUnitateField.closest('.form-group, .form-row, div').style.display = 'none';
                    return;
                }

                fetch(`/comenzi/get-subcategories?categorie=${categorieId}`, {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    subcategorieSelect.innerHTML = '<option value="">Selectează o subcategorie (opțional)</option>';
                    data.forEach(sub => {
                        const option = document.createElement('option');
                        option.value = sub.id;
                        option.text = sub.nume;
                        option.setAttribute('data-pret-standard', sub.pret_standard || '0');
                        option.setAttribute('data-km-utilizare-max', sub.km_utilizare_max || '0');
                        option.setAttribute('data-pret-per-l', sub.pret_per_l || '0');
                        subcategorieSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Eroare la încărcarea subcategoriilor:', error));
            }

            // Inițializare
            if (categorieField && subcategorieField && sumaField && pretUnitateField) {
                subcategorieSelect = document.createElement('select');
                subcategorieSelect.name = 'cheltuieli[subcategorie_select]';
                subcategorieSelect.innerHTML = '<option value="">Selectează o subcategorie (opțional)</option>';
                subcategorieField.parentNode.insertBefore(subcategorieSelect, subcategorieField);

                // Filtrăm categoria "Fixe" la inițializare
                filterCategorii();

                // Setăm vizibilitatea inițială a câmpului moneda
                toggleMonedaField();

                categorieField.addEventListener('change', function() {
                    updateSubcategories();
                    toggleMonedaField(); // Verificăm moneda la schimbarea categoriei
                });
                subcategorieSelect.addEventListener('change', onSubcategorieChange);

                if (litriMotorinaField) {
                    litriMotorinaField.addEventListener('input', recalcSuma);
                }
                pretUnitateField.addEventListener('input', recalcSuma);
                monedaField.addEventListener('change', recalcSuma);

                updateSubcategories();
            }
        });
    </script>
{% endblock %}